security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # browser acc don't need auth, can access auth session
        # api access need JWT auth
        api_web_security:
            pattern: ^/(login|logout|me|test)
            lazy: true
            provider: app_user_provider
            stateless: false

            json_login:
                check_path: app_login
                username_path: email
                password_path: password
                success_handler: App\Service\Security\LoginSuccessHandler

            logout:
                path: app_logout
                invalidate_session: true
        # api stateless, public access, no auth needed
        api_public:
            pattern: ^/(jwt-login|jwt-refresh|test)
            stateless: true
            security: false
        # api stateless, no session JWT needed
        api:
            pattern: ^/
            stateless: true
            provider: app_user_provider
            custom_authenticators:
                - App\Service\Security\JwtAuthenticator
#        main:
#            pattern: ^
#            lazy: true
#            provider: app_user_provider
#            stateless: false  # Enable session management
#
#            # Session-based login (you are doing it manually via API controller)
#            form_login: false  # Disabled because you're handling login manually

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

#            json_login:
#                check_path: app_login
#                username_path: email
#                password_path: password
#                success_handler: App\Service\Security\LoginSuccessHandler
#
#            logout:
#                path: app_logout
#                invalidate_session: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy:
        ROLE_ADMIN: [ ROLE_USER, ROLE_CLIENT ]

    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/logout, roles: PUBLIC_ACCESS }
        - { path: ^/me, roles: PUBLIC_ACCESS }
        # browser public access for testing purposes /api/test/*
        - { path: ^/test, roles: PUBLIC_ACCESS }
        # browser access needs to be authenticated
        - { path: ^/, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
